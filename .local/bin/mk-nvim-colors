#!/usr/bin/env bash
# Generate ~/.config/nvim/lua/colors.lua from the active palette

set -euo pipefail

outfile="$HOME/.config/nvim/lua/colors.lua"
source "$HOME/.config/colors/current"        # pulls in COLOR0â€¦COLOR15

cat > "$outfile" <<EOF
# Auto-generated by mk-nvim-colors on $(date --iso-8601=seconds)
local M = {}

M.setup = function()
  vim.opt.termguicolors = true

  -- base groups
  vim.api.nvim_set_hl(0, 'Normal',        { fg = "$FG", bg = "$BG" })
  vim.api.nvim_set_hl(0, 'LineNr',        { fg = "$FG", bg = "$BG" })
  vim.api.nvim_set_hl(0, 'CursorLine',    { bg = "$COLOR15" })
  vim.api.nvim_set_hl(0, 'CursorLineNr',  { fg = "$ACCENT", bg = "$COLOR15", bold = true })
  vim.api.nvim_set_hl(0, 'Visual',        { bg = "$COLOR14" })
  vim.api.nvim_set_hl(0, 'StatusLine',    { fg = "$BG", bg = "$ACCENT" })
  vim.api.nvim_set_hl(0, 'VertSplit',     { fg = "$COLOR8" })
  vim.api.nvim_set_hl(0, 'Comment',       { fg = "$COLOR8", italic = true })

  -- diagnostics (optional)
  vim.api.nvim_set_hl(0, 'DiagnosticError', { fg = "$COLOR1" })
  vim.api.nvim_set_hl(0, 'DiagnosticWarn',  { fg = "$COLOR3" })
  vim.api.nvim_set_hl(0, 'DiagnosticInfo',  { fg = "$COLOR4" })
  vim.api.nvim_set_hl(0, 'DiagnosticHint',  { fg = "$COLOR6" })
end

return M

EOF

echo "Wrote Nvim colors to $outfile"


